//==============================================================================
//  @file       sql_daily_time_frame.proto
//  @ingroup    proto database interface
//  @brief		Operations on restaurant time frame
//
//  Messages for daily time frame
//
//  @author     Bart Houkes
//
//------------------------------------------------------------------------------
//  Copyright (c) Bart Houkes, 25-12-2023
//
//  Copyright notice:
//  This software is property of Bart Houkes.
//  Unauthorized duplication and disclosure to third parties is forbidden.
//============================================================================*/

// add proto from sql_floor_table.h

syntax = "proto3";

option csharp_namespace = "GrpcService";

package dtf;

import "common_types.proto";

// Add these Kotlin-specific options
option java_multiple_files = true;
option java_package = "com.hha.daily.timeframe";

service DailyTimeFrameService
{
    rpc NextKitchenIndex(TransactionIdTimeFrameIndexParam)  returns (TimeFrameIndex) {}
    rpc FindCookingTimeFrames(common.Empty)  returns (common.TimeFrameList) {}
    rpc FindOpenTimeFrames(TimeFramesSorted)  returns (common.TimeFrameList) {}
    rpc SetCooked(TransactionIdTimeFrameIndexParam)  returns (common.Empty) {}
    rpc CopyTimeFrames(TransactionToTransaction)  returns (common.Empty) {}
    rpc InsertTimeFrame(InsertTimeFrameRequest)  returns (TimeFrameIndex) {}
    rpc GetLatestTimeFrameIndex(TransactionId)  returns  (TimeFrameIndex) {}
    rpc ChangeDeliverTime(DeliverTimeRequest)  returns (common.Empty) {}
    rpc EndTimeFrame(EndTimeFrameRequest)  returns (common.Empty) {}
    rpc RemoveTimeFrame(TransactionIdTimeFrameIndexParam)  returns (common.Empty) {}
    rpc StartTimeFrame(StartTimeFrameRequest)  returns (common.Empty) {}
    rpc SelectTransactionId(SelectTransactionRequest)  returns (common.TimeFrameList) {}
    rpc DeleteTransaction(TransactionId)  returns (common.Empty) {}
    rpc FindAllOpenTransactions(common.Empty)  returns (common.TimeFrameList) {}
    rpc InsertNewTimeFrame(common.Empty)  returns (TimeFrameIndex) {}
    rpc SetTimes(TimestampRequest)  returns (common.Empty) {}
    rpc MergeTransactions(TransactionToTransaction)  returns (common.Empty) {}
    rpc SetDelay(DelayRequest)  returns (common.Empty) {}
    rpc GetDeliverTime(TransactionIdTimeFrameIndexParam)  returns (common.Timestamp) {}
}

message TimestampRequest
{
	int32 transaction_id = 1;
	string timestamp = 2;
}

message DelayRequest
{
	int32 transaction_id =1;
	int32 time_frame = 2;
	int32 delay = 3;
}

message SelectTransactionRequest
{
	int32 transaction_id = 1;
	bool sort_descending = 2;
}

message StartTime
{
	string start_time = 1;
}

message TransactionId
{
    int32 transaction_id = 1;
}

message TransactionIdTimeFrameIndexParam
{
	int32 transaction_id = 1;
	int32 time_frame_index = 2;
}

message TimeFrameIndex
{
    int32 time_frame_index = 1;
}

message TimeFrameIndexList 
{
    repeated TimeFrameIndex time_frame = 1;
}

message TimeFramesSorted
{
    repeated TimeFrameIndex time_frame = 1;
    bool is_sort_on_time = 2;
}

message TransactionToTransaction
{
    int32 transaction_id = 1;
    int32 new_transaction_id = 2;
}

message StartTimeFrameRequest
{
    int32 person_id = 1;
    int32 transaction_id = 2;
    int32 device_id = 3;
    int32 time_frame_index = 4;
}

message InsertTimeFrameRequest
{
    int32 transaction_id = 1;
    int32 person_id = 2;
    string start_time = 3;
    string end_time = 4;
    common.CookingState state = 5;
    int32 type = 6;
    int32 device_id = 7;
    string deliver_time = 8;
    int32 prints = 9;
}

message DeliverTimeRequest
{
    int32 transaction_id = 1;
    int32 device_id = 2;
    int32 time_frame_index = 3;
    int32 time_frame_id = 4;
    string delayed_time = 5;
}

message EndTimeFrameRequest
{
    int32 transaction_id = 1;
    int32 time_frame_id = 2;
    int32 device_id = 3;
    string delayed_time = 4;
    bool is_delayed = 5;
    common.CookingState new_state = 6;
}

