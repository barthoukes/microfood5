//==============================================================================
//  @file       sql_menu_cluster.proto
//  @ingroup    proto database interface
//  @brief      Operations on clusters database
//
//  Messages for menu cards clusters + items
//
//  @author     Bart Houkes
//
//------------------------------------------------------------------------------
//  Copyright (c) Bart Houkes, 11-11-2024
//
//  Copyright notice:
//  This software is property of Bart Houkes.
//  Unauthorized duplication and disclosure to third parties is forbidden.
//============================================================================*/

syntax = "proto3";

option csharp_namespace = "menuService";

package mc;

import "common_types.proto";

// Add these Kotlin-specific options
option java_multiple_files = true;
option java_package = "com.hha.menu.cluster";

service MenuClusterService
{
    rpc BackupClusters(common.Empty) returns (common.Empty);
    rpc DuplicateCluster(DuplicateClusterRequest) returns (ClusterId);
    rpc DuplicateMenuCard(DuplicateMenuCardRequest) returns (common.Empty);
    rpc EraseCluster(ClusterIdRequest) returns (common.Empty);
    rpc ExchangeCluster(ExchangeClusterRequest) returns (common.Empty);
    rpc FindAllClusters(common.MenuCardId) returns (ClusterList);
    rpc GetCluster(ClusterId) returns (Cluster);
    rpc GetNrClusters(common.MenuCardId) returns (CountMenuCards);
    rpc MysqlDump(common.Empty) returns (common.TextDump);
    rpc RemoveAllClustersFromMenuCard(common.MenuCardId) returns (common.Empty);
    rpc RestoreClusters(common.Empty) returns (common.Empty);
    rpc SaveAllClusters(SaveClusterRequest) returns (common.Empty);    
    rpc UpdateCluster(Cluster) returns (common.Empty);
}

message CountMenuCards
{
    int32 menu_cards = 1;
}

message ClusterId
{
    int32 cluster_id = 1;
}

message DuplicateMenuCardRequest 
{
    int32 menu_card_id = 1;
    int32 destination_id = 2;
}

message ClusterIdRequest 
{
    int32 menu_card_id = 1;
    int32 cluster_id = 2;
}

message ExchangeClusterRequest
{
  int32 menu_card_id = 1;
  int32 src_cluster_id = 2;  // Assuming short can be represented as int32.
  int32 dst_cluster_id = 3;  // Assuming short can be represented as int32.
}

message DuplicateClusterRequest 
{
  int32 menu_card_id = 1;
  int32 cluster_index = 2;
  int32 new_cluster_index = 3;
}

message Cluster
{
    int32  menu_card_id = 1;  ///< What menu card.
    int32  menu_cluster_id = 2;  ///< Which cluster index 1..32
    common.ClusterType  cluster_type = 3;  ///< Select many, all or N.
    string  local_name = 4;   ///< Name for the cluster.
    string  chinese_name = 5; ///< Name for the cluster.
    int32  quantity = 6;    ///< In case of N, this is the amount.
}

message ClusterList
{
    repeated Cluster clusters = 1;
}

message SaveClusterRequest
{
    int32 menu_card_id = 1;
    repeated Cluster clusters = 2;
}

